using Microsoft.VisualStudio.TestTools.UnitTesting;
using Nemo.Configuration.Mapping;
using Nemo.Id;
using System;
using System.Data;
using System.Linq.Expressions;

namespace Nemo.UnitTests
{
    [TestClass]
    public class PropertyMapTests
    {
        public class TestEntity
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public DateTime CreatedDate { get; set; }
            public bool IsActive { get; set; }
            public int? ParentId { get; set; }
        }

        public class TestParentEntity
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }

        public class TestIdGenerator : IIdGenerator
        {
            public object Generate()
            {
                return Guid.NewGuid().GetHashCode();
            }
        }

        private PropertyMap<TestEntity, int> CreateIdPropertyMap()
        {
            Expression<Func<TestEntity, int>> selector = x => x.Id;
            return new PropertyMap<TestEntity, int>(selector);
        }

        private PropertyMap<TestEntity, string> CreateNamePropertyMap()
        {
            Expression<Func<TestEntity, string>> selector = x => x.Name;
            return new PropertyMap<TestEntity, string>(selector);
        }

        [TestMethod]
        public void PrimaryKey_SetsIsPrimaryKeyTrue()
        {
            var propertyMap = CreateIdPropertyMap();

            var result = propertyMap.PrimaryKey();

            Assert.IsTrue(((IPropertyMap)result).Property.IsPrimaryKey);
            Assert.AreEqual(0, ((IPropertyMap)result).Property.KeyPosition);
        }

        [TestMethod]
        public void PrimaryKey_WithPosition_SetsKeyPosition()
        {
            var propertyMap = CreateIdPropertyMap();

            var result = propertyMap.PrimaryKey(5);

            Assert.IsTrue(((IPropertyMap)result).Property.IsPrimaryKey);
            Assert.AreEqual(5, ((IPropertyMap)result).Property.KeyPosition);
        }

        [TestMethod]
        public void Not_PrimaryKey_SetsIsPrimaryKeyFalse()
        {
            var propertyMap = CreateIdPropertyMap();

            var result = propertyMap.Not.PrimaryKey();

            Assert.IsFalse(((IPropertyMap)result).Property.IsPrimaryKey);
        }

        [TestMethod]
        public void Generated_SetsIsAutoGeneratedTrue()
        {
            var propertyMap = CreateIdPropertyMap();

            var result = propertyMap.Generated();

            Assert.IsTrue(((IPropertyMap)result).Property.IsAutoGenerated);
            Assert.IsNull(((IPropertyMap)result).Property.Generator);
        }

        [TestMethod]
        public void Generated_WithCustomGenerator_SetsGenerator()
        {
            var propertyMap = CreateIdPropertyMap();

            var result = propertyMap.Generated(typeof(TestIdGenerator));

            Assert.IsFalse(((IPropertyMap)result).Property.IsAutoGenerated);
            Assert.AreEqual(typeof(TestIdGenerator), ((IPropertyMap)result).Property.Generator);
        }

        [TestMethod]
        public void Generated_WithInvalidGenerator_SetsAutoGenerated()
        {
            var propertyMap = CreateIdPropertyMap();

            var result = propertyMap.Generated(typeof(string));

            Assert.IsTrue(((IPropertyMap)result).Property.IsAutoGenerated);
            Assert.IsNull(((IPropertyMap)result).Property.Generator);
        }

        [TestMethod]
        public void Not_Generated_SetsIsAutoGeneratedFalse()
        {
            var propertyMap = CreateIdPropertyMap();

            var result = propertyMap.Not.Generated();

            Assert.IsFalse(((IPropertyMap)result).Property.IsAutoGenerated);
        }

        [TestMethod]
        public void References_SetsParentType()
        {
            var propertyMap = new PropertyMap<TestEntity, int?>(x => x.ParentId);

            var result = propertyMap.References<TestParentEntity>();

            Assert.AreEqual(typeof(TestParentEntity), ((IPropertyMap)result).Property.Parent);
            Assert.AreEqual(0, ((IPropertyMap)result).Property.RefPosition);
        }

        [TestMethod]
        public void References_WithPosition_SetsRefPosition()
        {
            var propertyMap = new PropertyMap<TestEntity, int?>(x => x.ParentId);

            var result = propertyMap.References<TestParentEntity>(3);

            Assert.AreEqual(typeof(TestParentEntity), ((IPropertyMap)result).Property.Parent);
            Assert.AreEqual(3, ((IPropertyMap)result).Property.RefPosition);
        }

        [TestMethod]
        public void Parameter_SetsParameterName()
        {
            var propertyMap = CreateNamePropertyMap();

            var result = propertyMap.Parameter("@EntityName");

            Assert.AreEqual("@EntityName", ((IPropertyMap)result).Property.ParameterName);
            Assert.AreEqual(ParameterDirection.Input, ((IPropertyMap)result).Property.Direction);
        }

        [TestMethod]
        public void Parameter_WithDirection_SetsDirection()
        {
            var propertyMap = CreateNamePropertyMap();

            var result = propertyMap.Parameter("@OutputParam", ParameterDirection.Output);

            Assert.AreEqual("@OutputParam", ((IPropertyMap)result).Property.ParameterName);
            Assert.AreEqual(ParameterDirection.Output, ((IPropertyMap)result).Property.Direction);
        }

        [TestMethod]
        public void Persistent_SetsIsPersistentTrue()
        {
            var propertyMap = CreateNamePropertyMap();

            var result = propertyMap.Persistent();

            Assert.IsTrue(((IPropertyMap)result).Property.IsPersistent);
        }

        [TestMethod]
        public void Not_Persistent_SetsIsPersistentFalse()
        {
            var propertyMap = CreateNamePropertyMap();

            var result = propertyMap.Not.Persistent();

            Assert.IsFalse(((IPropertyMap)result).Property.IsPersistent);
        }

        [TestMethod]
        public void Selectable_SetsIsSelectableTrue()
        {
            var propertyMap = CreateNamePropertyMap();

            var result = propertyMap.Selectable();

            Assert.IsTrue(((IPropertyMap)result).Property.IsSelectable);
        }

        [TestMethod]
        public void Not_Selectable_SetsIsSelectableFalse()
        {
            var propertyMap = CreateNamePropertyMap();

            var result = propertyMap.Not.Selectable();

            Assert.IsFalse(((IPropertyMap)result).Property.IsSelectable);
        }

        [TestMethod]
        public void Serializable_SetsIsSerializableTrue()
        {
            var propertyMap = CreateNamePropertyMap();

            var result = propertyMap.Serializable();

            Assert.IsTrue(((IPropertyMap)result).Property.IsSerializable);
        }

        [TestMethod]
        public void Not_Serializable_SetsIsSerializableFalse()
        {
            var propertyMap = CreateNamePropertyMap();

            var result = propertyMap.Not.Serializable();

            Assert.IsFalse(((IPropertyMap)result).Property.IsSerializable);
        }

        [TestMethod]
        public void Column_SetsMappedColumnName()
        {
            var propertyMap = CreateNamePropertyMap();

            var result = propertyMap.Column("entity_name");

            Assert.AreEqual("entity_name", ((IPropertyMap)result).Property.MappedColumnName);
        }

        [TestMethod]
        public void SourceProperty_SetsMappedPropertyName()
        {
            var propertyMap = CreateNamePropertyMap();

            var result = propertyMap.SourceProperty("SourceName");

            Assert.AreEqual("SourceName", ((IPropertyMap)result).Property.MappedPropertyName);
        }

        [TestMethod]
        public void FluentChaining_AllowsMultipleConfigurations()
        {
            var propertyMap = CreateIdPropertyMap();

            var result = propertyMap
                .PrimaryKey(1)
                .Generated()
                .Column("entity_id")
                .Parameter("@Id", ParameterDirection.InputOutput);

            var property = ((IPropertyMap)result).Property;
            Assert.IsTrue(property.IsPrimaryKey);
            Assert.AreEqual(1, property.KeyPosition);
            Assert.IsTrue(property.IsAutoGenerated);
            Assert.AreEqual("entity_id", property.MappedColumnName);
            Assert.AreEqual("@Id", property.ParameterName);
            Assert.AreEqual(ParameterDirection.InputOutput, property.Direction);
        }

        [TestMethod]
        public void Not_ResetsAfterEachOperation()
        {
            var propertyMap = CreateNamePropertyMap();

            var result = propertyMap
                .Not.Persistent()
                .Selectable()
                .Not.Serializable();

            var property = ((IPropertyMap)result).Property;
            Assert.IsFalse(property.IsPersistent);
            Assert.IsTrue(property.IsSelectable);
            Assert.IsFalse(property.IsSerializable);
        }

        [TestMethod]
        public void PropertyMap_PreservesPropertyInfo()
        {
            var propertyMap = CreateNamePropertyMap();

            var property = ((IPropertyMap)propertyMap).Property;

            Assert.AreEqual("Name", property.PropertyName);
            Assert.AreEqual(typeof(string), property.PropertyType);
        }
    }
}
