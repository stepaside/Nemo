using Microsoft.VisualStudio.TestTools.UnitTesting;
using Nemo.Reflection;
using Nemo.Attributes;
using Nemo.Id;
using System;
using System.Collections.Generic;
using System.Data;
using System.Reflection;
using Newtonsoft.Json.Converters;

namespace Nemo.UnitTests
{
    [TestClass]
    public class ReflectedPropertyTests
    {
        public class TestEntity
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public DateTime CreatedDate { get; set; }
            public byte[] Data { get; set; }
            public List<string> Tags { get; set; }
            public IList<int> Numbers { get; set; }
            public bool? IsActive { get; set; }
        }

        public class TestEntityWithAttributes
        {
            [PrimaryKey(1)]
            [Generate.Native]
            [MapColumn("entity_id")]
            public int Id { get; set; }

            [MapProperty("entity_name")]
            [Parameter("@Name", Direction = ParameterDirection.Input)]
            public string Name { get; set; }

            [DoNotPersist]
            [DoNotSerialize]
            public string ComputedField { get; set; }

            [DoNotSelect]
            public string InternalField { get; set; }

            [References(typeof(TestEntity), Position = 0)]
            public int? ParentId { get; set; }
        }

        public class TestIdGenerator : IIdGenerator
        {
            public object Generate() => Guid.NewGuid().GetHashCode();
        }

        public class TestEntityWithCustomGenerator
        {
            [Generate.Using(typeof(TestIdGenerator))]
            public int Id { get; set; }
        }

        [TestMethod]
        public void ReflectedProperty_BasicProperty_SetsCorrectDefaults()
        {
            var property = typeof(TestEntity).GetProperty("Name");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.AreEqual("Name", reflectedProperty.PropertyName);
            Assert.AreEqual(typeof(string), reflectedProperty.PropertyType);
            Assert.IsTrue(reflectedProperty.IsPersistent);
            Assert.IsTrue(reflectedProperty.IsSelectable);
            Assert.IsTrue(reflectedProperty.IsSerializable);
            Assert.IsTrue(reflectedProperty.CanRead);
            Assert.IsTrue(reflectedProperty.CanWrite);
            Assert.IsFalse(reflectedProperty.IsPrimaryKey);
            Assert.IsFalse(reflectedProperty.IsAutoGenerated);
        }

        [TestMethod]
        public void ReflectedProperty_IntProperty_DetectsSimpleType()
        {
            var property = typeof(TestEntity).GetProperty("Id");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.IsTrue(reflectedProperty.IsSimpleType);
            Assert.IsFalse(reflectedProperty.IsBinary);
            Assert.IsFalse(reflectedProperty.IsList);
            Assert.IsFalse(reflectedProperty.IsDataEntity);
        }

        [TestMethod]
        public void ReflectedProperty_ByteArrayProperty_DetectsBinary()
        {
            var property = typeof(TestEntity).GetProperty("Data");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.IsTrue(reflectedProperty.IsBinary);
            Assert.IsFalse(reflectedProperty.IsSimpleType);
            Assert.IsFalse(reflectedProperty.IsList);
        }

        [TestMethod]
        public void ReflectedProperty_ListProperty_DetectsList()
        {
            var property = typeof(TestEntity).GetProperty("Tags");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.IsTrue(reflectedProperty.IsList);
            Assert.IsTrue(reflectedProperty.IsSimpleList);
            Assert.IsFalse(reflectedProperty.IsListInterface);
            Assert.AreEqual(typeof(string), reflectedProperty.ElementType);
        }

        [TestMethod]
        public void ReflectedProperty_IListProperty_DetectsListInterface()
        {
            var property = typeof(TestEntity).GetProperty("Numbers");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.IsTrue(reflectedProperty.IsList);
            Assert.IsTrue(reflectedProperty.IsListInterface);
            Assert.AreEqual(typeof(int), reflectedProperty.ElementType);
        }

        [TestMethod]
        public void ReflectedProperty_NullableProperty_DetectsNullable()
        {
            var property = typeof(TestEntity).GetProperty("IsActive");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.IsTrue(reflectedProperty.IsNullableType);
            Assert.IsTrue(reflectedProperty.IsSimpleType);
        }

        [TestMethod]
        public void ReflectedProperty_PrimaryKeyAttribute_SetsPrimaryKey()
        {
            var property = typeof(TestEntityWithAttributes).GetProperty("Id");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.IsTrue(reflectedProperty.IsPrimaryKey);
            Assert.AreEqual(1, reflectedProperty.KeyPosition);
        }

        [TestMethod]
        public void ReflectedProperty_GenerateNativeAttribute_SetsAutoGenerated()
        {
            var property = typeof(TestEntityWithAttributes).GetProperty("Id");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.IsTrue(reflectedProperty.IsAutoGenerated);
        }

        [TestMethod]
        public void ReflectedProperty_GenerateUsingAttribute_SetsGenerator()
        {
            var property = typeof(TestEntityWithCustomGenerator).GetProperty("Id");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.AreEqual(typeof(TestIdGenerator), reflectedProperty.Generator);
            Assert.IsFalse(reflectedProperty.IsAutoGenerated);
        }

        [TestMethod]
        public void ReflectedProperty_MapColumnAttribute_SetsMappedColumnName()
        {
            var property = typeof(TestEntityWithAttributes).GetProperty("Id");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.AreEqual("entity_id", reflectedProperty.MappedColumnName);
        }

        [TestMethod]
        public void ReflectedProperty_MapPropertyAttribute_SetsMappedPropertyName()
        {
            var property = typeof(TestEntityWithAttributes).GetProperty("Name");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.AreEqual("entity_name", reflectedProperty.MappedPropertyName);
        }

        [TestMethod]
        public void ReflectedProperty_ParameterAttribute_SetsParameterInfo()
        {
            var property = typeof(TestEntityWithAttributes).GetProperty("Name");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.AreEqual("@Name", reflectedProperty.ParameterName);
            Assert.AreEqual(ParameterDirection.Input, reflectedProperty.Direction);
        }

        [TestMethod]
        public void ReflectedProperty_DoNotPersistAttribute_SetsNotPersistent()
        {
            var property = typeof(TestEntityWithAttributes).GetProperty("ComputedField");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.IsFalse(reflectedProperty.IsPersistent);
        }

        [TestMethod]
        public void ReflectedProperty_DoNotSerializeAttribute_SetsNotSerializable()
        {
            var property = typeof(TestEntityWithAttributes).GetProperty("ComputedField");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.IsFalse(reflectedProperty.IsSerializable);
        }

        [TestMethod]
        public void ReflectedProperty_DoNotSelectAttribute_SetsNotSelectable()
        {
            var property = typeof(TestEntityWithAttributes).GetProperty("InternalField");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.IsFalse(reflectedProperty.IsSelectable);
        }

        [TestMethod]
        public void ReflectedProperty_ReferencesAttribute_SetsParentInfo()
        {
            var property = typeof(TestEntityWithAttributes).GetProperty("ParentId");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.AreEqual(typeof(TestEntity), reflectedProperty.Parent);
            Assert.AreEqual(0, reflectedProperty.RefPosition);
        }

        [TestMethod]
        public void ReflectedProperty_WithoutReadingAttributes_SkipsAttributeProcessing()
        {
            var property = typeof(TestEntityWithAttributes).GetProperty("Id");
            
            var reflectedProperty = new ReflectedProperty(property, readAttributes: false);
            
            Assert.IsFalse(reflectedProperty.IsPrimaryKey);
            Assert.IsFalse(reflectedProperty.IsAutoGenerated);
            Assert.AreEqual("Id", reflectedProperty.MappedColumnName);
        }

        [TestMethod]
        public void ReflectedProperty_WithPosition_SetsPosition()
        {
            var property = typeof(TestEntity).GetProperty("Name");
            
            var reflectedProperty = new ReflectedProperty(property, position: 5);
            
            Assert.AreEqual(5, reflectedProperty.Position);
        }

        [TestMethod]
        public void ReflectedProperty_ToString_ReturnsMapping()
        {
            var property = typeof(TestEntityWithAttributes).GetProperty("Name");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            var result = reflectedProperty.ToString();
            
            Assert.AreEqual("entity_name => Name", result);
        }

        [TestMethod]
        public void ReflectedProperty_AddConverter_SetsConverter()
        {
            var property = typeof(TestEntity).GetProperty("Name");
            var reflectedProperty = new ReflectedProperty(property);
            
            reflectedProperty.AddConverter(typeof(StringEnumConverter));
            
            Assert.AreEqual(typeof(StringEnumConverter), reflectedProperty.Converter);
        }

        [TestMethod]
        public void ReflectedProperty_MultipleAttributes_ProcessesAll()
        {
            var property = typeof(TestEntityWithAttributes).GetProperty("Id");
            
            var reflectedProperty = new ReflectedProperty(property);
            
            Assert.IsTrue(reflectedProperty.IsPrimaryKey);
            Assert.AreEqual(1, reflectedProperty.KeyPosition);
            Assert.IsTrue(reflectedProperty.IsAutoGenerated);
            Assert.AreEqual("entity_id", reflectedProperty.MappedColumnName);
        }
    }
}
