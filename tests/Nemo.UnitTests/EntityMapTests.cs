using Microsoft.VisualStudio.TestTools.UnitTesting;
using Nemo.Configuration.Mapping;
using System;
using System.Linq;

namespace Nemo.UnitTests
{
    [TestClass]
    public class EntityMapTests
    {
        public class TestEntity
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public DateTime CreatedDate { get; set; }
            public bool IsActive { get; set; }
            public string Description { get; set; }
        }

        public class TestEntityMap : EntityMap<TestEntity>
        {
            public TestEntityMap()
            {
                TableName = "test_entities";
                SchemaName = "test_schema";
                DatabaseName = "test_database";
                ConnectionStringName = "TestConnection";
                ReadOnly = false;
                SoftDeleteColumnName = "deleted_at";
            }
        }

        public class FluentTestEntityMap : EntityMap<TestEntity>
        {
            public FluentTestEntityMap()
            {
                Property(e => e.Id)
                    .PrimaryKey()
                    .Generated()
                    .Column("entity_id");

                Property(e => e.Name)
                    .Column("entity_name")
                    .Parameter("@Name");

                Property(e => e.CreatedDate)
                    .Column("created_timestamp")
                    .Not.Selectable();

                Property(e => e.IsActive)
                    .Column("is_active")
                    .Persistent();

                Property(e => e.Description)
                    .Not.Persistent()
                    .Not.Serializable();
            }
        }

        [TestMethod]
        public void EntityMap_Constructor_SetsDefaultTableName()
        {
            var entityMap = new TestEntityMap();

            Assert.AreEqual("test_entities", entityMap.TableName);
        }

        [TestMethod]
        public void EntityMap_Constructor_SetsAllProperties()
        {
            var entityMap = new TestEntityMap();

            Assert.AreEqual("test_entities", entityMap.TableName);
            Assert.AreEqual("test_schema", entityMap.SchemaName);
            Assert.AreEqual("test_database", entityMap.DatabaseName);
            Assert.AreEqual("TestConnection", entityMap.ConnectionStringName);
            Assert.AreEqual(false, entityMap.ReadOnly);
            Assert.AreEqual("deleted_at", entityMap.SoftDeleteColumnName);
        }

        [TestMethod]
        public void Property_CreatesPropertyMap()
        {
            var entityMap = new FluentTestEntityMap();

            var properties = entityMap.Properties;

            Assert.IsNotNull(properties);
            Assert.IsTrue(properties.Count > 0);
        }

        [TestMethod]
        public void FluentConfiguration_ConfiguresAllProperties()
        {
            var entityMap = new FluentTestEntityMap();

            var properties = entityMap.Properties.ToList();

            Assert.AreEqual(5, properties.Count);

            var idProperty = properties.FirstOrDefault(p => p.Property.PropertyName == "Id");
            Assert.IsNotNull(idProperty);
            Assert.IsTrue(idProperty.Property.IsPrimaryKey);
            Assert.IsTrue(idProperty.Property.IsAutoGenerated);
            Assert.AreEqual("entity_id", idProperty.Property.MappedColumnName);

            var nameProperty = properties.FirstOrDefault(p => p.Property.PropertyName == "Name");
            Assert.IsNotNull(nameProperty);
            Assert.AreEqual("entity_name", nameProperty.Property.MappedColumnName);
            Assert.AreEqual("@Name", nameProperty.Property.ParameterName);

            var createdDateProperty = properties.FirstOrDefault(p => p.Property.PropertyName == "CreatedDate");
            Assert.IsNotNull(createdDateProperty);
            Assert.AreEqual("created_timestamp", createdDateProperty.Property.MappedColumnName);
            Assert.IsFalse(createdDateProperty.Property.IsSelectable);

            var isActiveProperty = properties.FirstOrDefault(p => p.Property.PropertyName == "IsActive");
            Assert.IsNotNull(isActiveProperty);
            Assert.AreEqual("is_active", isActiveProperty.Property.MappedColumnName);
            Assert.IsTrue(isActiveProperty.Property.IsPersistent);

            var descriptionProperty = properties.FirstOrDefault(p => p.Property.PropertyName == "Description");
            Assert.IsNotNull(descriptionProperty);
            Assert.IsFalse(descriptionProperty.Property.IsPersistent);
            Assert.IsFalse(descriptionProperty.Property.IsSerializable);
        }

        [TestMethod]
        public void Properties_Collection_IsNotNull()
        {
            var entityMap = new TestEntityMap();

            var properties = entityMap.Properties;

            Assert.IsNotNull(properties);
        }

        [TestMethod]
        public void Properties_EmptyMap_ReturnsEmptyCollection()
        {
            var entityMap = new TestEntityMap();

            var properties = entityMap.Properties;

            Assert.AreEqual(0, properties.Count);
        }

        [TestMethod]
        public void EntityMap_Inheritance_WorksCorrectly()
        {
            var entityMap = new TestEntityMap();

            Assert.IsInstanceOfType(entityMap, typeof(EntityMap<TestEntity>));
            Assert.IsInstanceOfType(entityMap, typeof(IEntityMap));
        }

        [TestMethod]
        public void Property_ComplexChaining_WorksCorrectly()
        {
            var entityMap = new TestEntityMap();

            var result = entityMap.Property(e => e.Id)
                .PrimaryKey(1)
                .Generated()
                .Column("pk_id")
                .Parameter("@EntityId")
                .Persistent()
                .Selectable()
                .Serializable();

            Assert.IsNotNull(result);
            var property = ((IPropertyMap)result).Property;
            Assert.IsTrue(property.IsPrimaryKey);
            Assert.AreEqual(1, property.KeyPosition);
            Assert.IsTrue(property.IsAutoGenerated);
            Assert.AreEqual("pk_id", property.MappedColumnName);
            Assert.AreEqual("@EntityId", property.ParameterName);
            Assert.IsTrue(property.IsPersistent);
            Assert.IsTrue(property.IsSelectable);
            Assert.IsTrue(property.IsSerializable);
        }
    }
}
