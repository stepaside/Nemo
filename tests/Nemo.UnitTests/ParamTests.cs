using Microsoft.VisualStudio.TestTools.UnitTesting;
using Nemo;
using System;
using System.Data;

namespace Nemo.UnitTests
{
    [TestClass]
    public class ParamTests
    {
        [TestMethod]
        public void Param_DefaultConstructor_SetsDefaultValues()
        {
            var param = new Param();

            Assert.AreEqual(ParameterDirection.Input, param.Direction);
            Assert.AreEqual(-1, param.Size);
            Assert.IsNull(param.Name);
            Assert.IsNull(param.Value);
            Assert.IsNull(param.DbType);
            Assert.IsNull(param.Source);
            Assert.IsFalse(param.IsAutoGenerated);
            Assert.IsFalse(param.IsPrimaryKey);
        }

        [TestMethod]
        public void Param_CopyConstructor_CopiesAllProperties()
        {
            var original = new Param
            {
                Name = "TestParam",
                Direction = ParameterDirection.Output,
                Value = "TestValue",
                DbType = System.Data.DbType.String,
                Size = 100
            };

            var copy = new Param(original);

            Assert.AreEqual(original.Name, copy.Name);
            Assert.AreEqual(original.Direction, copy.Direction);
            Assert.AreEqual(original.Value, copy.Value);
            Assert.AreEqual(original.DbType, copy.DbType);
            Assert.AreEqual(original.Size, copy.Size);
        }

        [TestMethod]
        public void Param_IDataParameterConstructor_CopiesProperties()
        {
            var mockParameter = new MockDataParameter
            {
                ParameterName = "TestParam",
                Direction = ParameterDirection.InputOutput,
                Value = 123,
                DbType = System.Data.DbType.Int32
            };

            var param = new Param(mockParameter);

            Assert.AreEqual("TestParam", param.Name);
            Assert.AreEqual(ParameterDirection.InputOutput, param.Direction);
            Assert.AreEqual(123, param.Value);
            Assert.AreEqual(System.Data.DbType.Int32, param.DbType);
        }

        [TestMethod]
        public void Param_IDbDataParameterConstructor_CopiesPropertiesIncludingSize()
        {
            var mockParameter = new MockDbDataParameter
            {
                ParameterName = "TestParam",
                Direction = ParameterDirection.ReturnValue,
                Value = "TestValue",
                DbType = System.Data.DbType.String,
                Size = 255
            };

            var param = new Param(mockParameter);

            Assert.AreEqual("TestParam", param.Name);
            Assert.AreEqual(ParameterDirection.ReturnValue, param.Direction);
            Assert.AreEqual("TestValue", param.Value);
            Assert.AreEqual(System.Data.DbType.String, param.DbType);
            Assert.AreEqual(255, param.Size);
        }

        [TestMethod]
        public void Param_Type_ReturnsValueType()
        {
            var param = new Param { Value = 123 };

            Assert.AreEqual(typeof(int), param.Type);
        }

        [TestMethod]
        public void Param_Type_WithNullValue_ReturnsNull()
        {
            var param = new Param { Value = null };

            Assert.IsNull(param.Type);
        }

        [TestMethod]
        public void Param_IsString_WithStringValue_ReturnsTrue()
        {
            var param = new Param { Value = "TestString" };

            Assert.IsTrue(param.IsString);
            Assert.IsFalse(param.IsBinary);
            Assert.IsFalse(param.IsArray);
        }

        [TestMethod]
        public void Param_IsString_WithNonStringValue_ReturnsFalse()
        {
            var param = new Param { Value = 123 };

            Assert.IsFalse(param.IsString);
        }

        [TestMethod]
        public void Param_IsBinary_WithByteArray_ReturnsTrue()
        {
            var param = new Param { Value = new byte[] { 1, 2, 3 } };

            Assert.IsTrue(param.IsBinary);
            Assert.IsFalse(param.IsString);
            Assert.IsFalse(param.IsArray);
        }

        [TestMethod]
        public void Param_IsBinary_WithNonByteArray_ReturnsFalse()
        {
            var param = new Param { Value = new int[] { 1, 2, 3 } };

            Assert.IsFalse(param.IsBinary);
        }

        [TestMethod]
        public void Param_IsArray_WithIntArray_ReturnsTrue()
        {
            var param = new Param { Value = new int[] { 1, 2, 3 } };

            Assert.IsTrue(param.IsArray);
            Assert.IsFalse(param.IsString);
            Assert.IsFalse(param.IsBinary);
        }

        [TestMethod]
        public void Param_IsArray_WithList_ReturnsTrue()
        {
            var param = new Param { Value = new System.Collections.Generic.List<int> { 1, 2, 3 } };

            Assert.IsTrue(param.IsArray);
            Assert.IsFalse(param.IsString);
            Assert.IsFalse(param.IsBinary);
        }

        [TestMethod]
        public void Param_IsArray_WithString_ReturnsFalse()
        {
            var param = new Param { Value = "TestString" };

            Assert.IsFalse(param.IsArray);
            Assert.IsTrue(param.IsString);
        }

        [TestMethod]
        public void Param_IsArray_WithByteArray_ReturnsFalse()
        {
            var param = new Param { Value = new byte[] { 1, 2, 3 } };

            Assert.IsFalse(param.IsArray);
            Assert.IsTrue(param.IsBinary);
        }

        [TestMethod]
        public void Param_IsArray_WithScalarValue_ReturnsFalse()
        {
            var param = new Param { Value = 123 };

            Assert.IsFalse(param.IsArray);
            Assert.IsFalse(param.IsString);
            Assert.IsFalse(param.IsBinary);
        }

        [TestMethod]
        public void Param_Properties_CanBeSetAndRetrieved()
        {
            var param = new Param
            {
                Name = "TestParam",
                Direction = ParameterDirection.Output,
                Value = "TestValue",
                DbType = System.Data.DbType.String,
                Size = 100,
                Source = "TestSource",
                IsAutoGenerated = true,
                IsPrimaryKey = true
            };

            Assert.AreEqual("TestParam", param.Name);
            Assert.AreEqual(ParameterDirection.Output, param.Direction);
            Assert.AreEqual("TestValue", param.Value);
            Assert.AreEqual(System.Data.DbType.String, param.DbType);
            Assert.AreEqual(100, param.Size);
            Assert.AreEqual("TestSource", param.Source);
            Assert.IsTrue(param.IsAutoGenerated);
            Assert.IsTrue(param.IsPrimaryKey);
        }

        [TestMethod]
        public void Param_WithNullValue_TypePropertiesHandleCorrectly()
        {
            var param = new Param { Value = null };

            Assert.IsNull(param.Type);
            Assert.IsFalse(param.IsString);
            Assert.IsFalse(param.IsBinary);
            Assert.IsFalse(param.IsArray);
        }

        [TestMethod]
        public void Param_WithDifferentTypes_TypeDetectionWorks()
        {
            var stringParam = new Param { Value = "test" };
            var intParam = new Param { Value = 123 };
            var dateParam = new Param { Value = DateTime.Now };
            var boolParam = new Param { Value = true };
            var decimalParam = new Param { Value = 123.45m };

            Assert.AreEqual(typeof(string), stringParam.Type);
            Assert.AreEqual(typeof(int), intParam.Type);
            Assert.AreEqual(typeof(DateTime), dateParam.Type);
            Assert.AreEqual(typeof(bool), boolParam.Type);
            Assert.AreEqual(typeof(decimal), decimalParam.Type);
        }

        private class MockDataParameter : IDataParameter
        {
            public DbType DbType { get; set; }
            public ParameterDirection Direction { get; set; }
            public bool IsNullable { get; set; }
            public string ParameterName { get; set; }
            public string SourceColumn { get; set; }
            public DataRowVersion SourceVersion { get; set; }
            public object Value { get; set; }
        }

        private class MockDbDataParameter : IDbDataParameter
        {
            public DbType DbType { get; set; }
            public ParameterDirection Direction { get; set; }
            public bool IsNullable { get; set; }
            public string ParameterName { get; set; }
            public string SourceColumn { get; set; }
            public DataRowVersion SourceVersion { get; set; }
            public object Value { get; set; }
            public byte Precision { get; set; }
            public byte Scale { get; set; }
            public int Size { get; set; }
        }
    }
}
